Linux Kernel Fundamentals: Chapter 1, Surveying the Linux Kernel

================================================================

1. What kernel version is your Linux system running?

================================================================

$ uname -a
Linux <NDA> 6.8.0-40-generic #40-Ubuntu SMP PREEMPT_DYNAMIC Fri Jul  5 10:34:03 UTC 2024 x86_64 x86_64 x86_64 GNU/Linux

$ uname -r
6.8.0-40-generic

================================================================
i
2. What is the size of the kernel file that corresponds to the kernel your system is
running?

================================================================

$ ls -lh /boot/vmlinuz-6.8.0-40-generic 
-rw------- 1 root root 15M лип  5  2024 /boot/vmlinuz-6.8.0-40-generic

================================================================

3. How much RAM is available to your running kernel? Note: It may or may not be
the amount of physical RAM on your system.

================================================================

$ cat /proc/meminfo | grep MemTotal
MemTotal:       32635404 kB

================================================================

4. The command strace will display the system calls that a process makes as it runs.
Using the man command, determine what option for strace will show a summary,
with a count, of the number of times a process called each system call. Using that
option, what system call is called the most by the command date?

================================================================

$ strace -c date
субота, 22 лютого 2025 14:28:00 +0200
% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 60,55    0,000789         789         1           execve
  9,98    0,000130          43         3           mprotect
  6,98    0,000091          22         4           openat
  4,60    0,000060          60         1           munmap
>  3,61    0,000047           5         9           mmap
  3,38    0,000044          14         3           brk
  3,22    0,000042           7         6           fstat
  2,38    0,000031           5         6           close
  1,53    0,000020           6         3           read
  1,00    0,000013          13         1           getrandom
  0,77    0,000010          10         1           prlimit64
  0,46    0,000006           6         1           lseek
  0,38    0,000005           5         1           write
  0,31    0,000004           4         1           arch_prctl
  0,31    0,000004           4         1           set_robust_list
  0,31    0,000004           4         1           rseq
  0,23    0,000003           3         1           set_tid_address
  0,00    0,000000           0         2           pread64
  0,00    0,000000           0         1         1 access
------ ----------- ----------- --------- --------- ----------------
100,00    0,001303          27        47         1 total


================================================================

5. Can you determine, using strace, what system call is used to change the
directory?

================================================================

$ cat ./test.sh 
#!/bin/bash 
cd Desktop


$ strace  -c ./test.sh 
% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 47,91    0,000838         838         1           execve
 21,10    0,000369          26        14           mmap
 11,32    0,000198          28         7           openat
  2,74    0,000048           9         5           read
  2,69    0,000047           7         6           fstat
  2,23    0,000039           5         7           close
  1,54    0,000027           3         9           newfstatat
  1,43    0,000025           1        14           rt_sigaction
  1,37    0,000024          24         1         1 access
  1,32    0,000023          11         2           pread64
  0,97    0,000017           5         3           brk
  0,63    0,000011           2         5           rt_sigprocmask
  0,46    0,000008           8         1           arch_prctl
  0,46    0,000008           8         1           set_tid_address
  0,46    0,000008           8         1           set_robust_list
  0,46    0,000008           8         1           rseq
  0,34    0,000006           3         2         1 ioctl
  0,29    0,000005           1         3           lseek
  0,29    0,000005           1         3           getpid
  0,29    0,000005           1         3         1 fcntl
  0,29    0,000005           1         3           getppid
  0,29    0,000005           1         3           prlimit64
  0,23    0,000004           4         1           dup2
  0,17    0,000003           3         1           chdir
  0,11    0,000002           2         1           uname
  0,11    0,000002           2         1           getuid
  0,11    0,000002           2         1           geteuid
  0,11    0,000002           2         1           getegid
  0,11    0,000002           2         1           getpgrp
  0,11    0,000002           2         1           futex
  0,06    0,000001           1         1           getgid
  0,00    0,000000           0         4           mprotect
  0,00    0,000000           0         1           munmap
  0,00    0,000000           0         1           getrandom
------ ----------- ----------- --------- --------- ----------------
100,00    0,001749          15       110         3 total
 

================================================================

6. By looking at include/uapi/asm-generic/unistd.h determine about how many
system calls are defined in your kernel source.

================================================================

/usr/src/linux-headers-6.8.0-40/include/uapi/asm-generic$


$ cat unistd.h | grep '__SYSCALL(__' | wc -l
239

================================================================

7. Run a sleep 100 with & (to put it in the background). What files does its process
have open?

================================================================

sleep 100 &
[1] 1600065

$ ls /proc/1600065/fd
0  1  2

$ ls -l /proc/1600065/fd
total 0
lrwx------ 1 vandrishko vandrishko 64 лют 22 14:44 0 -> /dev/pts/1
lrwx------ 1 vandrishko vandrishko 64 лют 22 14:44 1 -> /dev/pts/1
lrwx------ 1 vandrishko vandrishko 64 лют 22 14:44 2 -> /dev/pts/1

=================================================================

8. Does your system have a PCI Ethernet device?

=================================================================

lspci | grep Ethernet
00:1f.6 Ethernet controller: Intel Corporation Ethernet Connection (10) I219-LM

=================================================================

9. Is the kernel variable ip_forward (under /proc/sys/…) set to 1 or 0 on your
system?

=================================================================

/proc/sys$ find . -name ip_forward
./net/ipv4/ip_forward

/proc/sys$ cat net/ipv4/ip_forward
1

=================================================================

10.  According to /sys/block, do you have a block device (disk) sda? If so, do you
have device files for partitions of sda? How many? Using strace, does the
command fdisk -l (run it as root), open any files under /sys/dev/block?

=================================================================

???

=================================================================

11. Using dmesg and grep, do you see the kernel reporting the kernel command line?
If not, can you determine if the boot messages from the kernel were lost? Does
your system have a log file that recorded the boot messages? You can grep for
BOOT_IMAGE under /var/log to look

=================================================================

$ sudo dmesg | grep BOOT
[    0.000000] Command line: BOOT_IMAGE=/vmlinuz-6.8.0-40-generic root=/dev/mapper/vgubuntu-root 
 ro apparmor=1 security=apparmor quiet splash vt.handoff=7

=================================================================

12. What other device files are character devices and share the same major number
with /dev/null?

=================================================================

/dev/zero ???

ls -l /dev/zero
crw-rw-rw- 1 root root 1, 5 лют 21 10:55 /dev/zero



